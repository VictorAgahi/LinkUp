// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: proto/crypto.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackageCrypto = "crypto";

export interface EncryptRequest {
  plaintext: string;
}

export interface EncryptResponse {
  ciphertext: string;
}

export interface DecryptRequest {
  ciphertext: string;
}

export interface DecryptResponse {
  plaintext: string;
}

export interface HashRequest {
  plaintext: string;
}

export interface HashResponse {
  hash: string;
}

export interface VerifyRequest {
  plaintext: string;
  hash: string;
}

export interface VerifyResponse {
  isValid: boolean;
}

export interface DeterministicEncryptRequest {
  plaintext: string;
}

export interface DeterministicEncryptResponse {
  ciphertext: string;
}

export const CRYPTO_PACKAGE_NAME = "crypto";

export interface CryptoServiceClient {
  encrypt(request: EncryptRequest): Observable<EncryptResponse>;

  decrypt(request: DecryptRequest): Observable<DecryptResponse>;

  hash(request: HashRequest): Observable<HashResponse>;

  verify(request: VerifyRequest): Observable<VerifyResponse>;

  deterministeEncrypt(request: DeterministicEncryptRequest): Observable<DeterministicEncryptResponse>;
}

export interface CryptoServiceController {
  encrypt(request: EncryptRequest): Promise<EncryptResponse> | Observable<EncryptResponse> | EncryptResponse;

  decrypt(request: DecryptRequest): Promise<DecryptResponse> | Observable<DecryptResponse> | DecryptResponse;

  hash(request: HashRequest): Promise<HashResponse> | Observable<HashResponse> | HashResponse;

  verify(request: VerifyRequest): Promise<VerifyResponse> | Observable<VerifyResponse> | VerifyResponse;

  deterministeEncrypt(
    request: DeterministicEncryptRequest,
  ): Promise<DeterministicEncryptResponse> | Observable<DeterministicEncryptResponse> | DeterministicEncryptResponse;
}

export function CryptoServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["encrypt", "decrypt", "hash", "verify", "deterministeEncrypt"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CryptoService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CryptoService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CRYPTO_SERVICE_NAME = "CryptoService";
