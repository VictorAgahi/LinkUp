// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: cache.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackageCache = "cache";

/** User Cache */
export interface CheckUserInCacheRequest {
  userId: string;
}

export interface CheckUserInCacheResponse {
  exists: boolean;
}

export interface AddUserToCacheRequest {
  userId: string;
  userData: string;
}

export interface AddUserToCacheResponse {
  success: boolean;
}

export interface UpdateUserInCacheRequest {
  userId: string;
  updatedData: string;
}

export interface UpdateUserInCacheResponse {
  success: boolean;
}

export interface RemoveUserFromCacheRequest {
  userId: string;
}

export interface RemoveUserFromCacheResponse {
  success: boolean;
}

export interface CheckTokenInCacheRequest {
  token: string;
}

export interface CheckTokenInCacheResponse {
  exists: boolean;
}

export interface RemoveTokenFromCacheRequest {
  token: string;
}

export interface RemoveTokenFromCacheResponse {
  success: boolean;
}

export interface CheckMessagesInCacheRequest {
  conversationId: string;
}

export interface CheckMessagesInCacheResponse {
  exists: boolean;
  messages: string[];
}

export interface AddMessagesToCacheRequest {
  conversationId: string;
  messages: string[];
}

export interface AddMessagesToCacheResponse {
  success: boolean;
}

export interface RemoveMessagesFromCacheRequest {
  conversationId: string;
}

export interface RemoveMessagesFromCacheResponse {
  success: boolean;
}

export interface CheckNotificationsInCacheRequest {
  userId: string;
}

export interface CheckNotificationsInCacheResponse {
  exists: boolean;
  notifications: string[];
}

export interface AddNotificationsToCacheRequest {
  userId: string;
  notifications: string[];
}

export interface AddNotificationsToCacheResponse {
  success: boolean;
}

export interface RemoveNotificationsFromCacheRequest {
  userId: string;
}

export interface RemoveNotificationsFromCacheResponse {
  success: boolean;
}

export interface CheckUserRelationInCacheRequest {
  userId1: string;
  userId2: string;
}

export interface CheckUserRelationInCacheResponse {
  exists: boolean;
}

export interface AddUserRelationToCacheRequest {
  userId1: string;
  userId2: string;
}

export interface AddUserRelationToCacheResponse {
  success: boolean;
}

export interface RemoveUserRelationFromCacheRequest {
  userId1: string;
  userId2: string;
}

export interface RemoveUserRelationFromCacheResponse {
  success: boolean;
}

export const CACHE_PACKAGE_NAME = "cache";

export interface CacheServiceClient {
  checkUserInCache(request: CheckUserInCacheRequest): Observable<CheckUserInCacheResponse>;

  addUserToCache(request: AddUserToCacheRequest): Observable<AddUserToCacheResponse>;

  updateUserInCache(request: UpdateUserInCacheRequest): Observable<UpdateUserInCacheResponse>;

  removeUserFromCache(request: RemoveUserFromCacheRequest): Observable<RemoveUserFromCacheResponse>;

  checkTokenInCache(request: CheckTokenInCacheRequest): Observable<CheckTokenInCacheResponse>;

  removeTokenFromCache(request: RemoveTokenFromCacheRequest): Observable<RemoveTokenFromCacheResponse>;

  checkMessagesInCache(request: CheckMessagesInCacheRequest): Observable<CheckMessagesInCacheResponse>;

  addMessagesToCache(request: AddMessagesToCacheRequest): Observable<AddMessagesToCacheResponse>;

  removeMessagesFromCache(request: RemoveMessagesFromCacheRequest): Observable<RemoveMessagesFromCacheResponse>;

  checkNotificationsInCache(request: CheckNotificationsInCacheRequest): Observable<CheckNotificationsInCacheResponse>;

  addNotificationsToCache(request: AddNotificationsToCacheRequest): Observable<AddNotificationsToCacheResponse>;

  removeNotificationsFromCache(
    request: RemoveNotificationsFromCacheRequest,
  ): Observable<RemoveNotificationsFromCacheResponse>;

  checkUserRelationInCache(request: CheckUserRelationInCacheRequest): Observable<CheckUserRelationInCacheResponse>;

  addUserRelationToCache(request: AddUserRelationToCacheRequest): Observable<AddUserRelationToCacheResponse>;

  removeUserRelationFromCache(
    request: RemoveUserRelationFromCacheRequest,
  ): Observable<RemoveUserRelationFromCacheResponse>;
}

export interface CacheServiceController {
  checkUserInCache(
    request: CheckUserInCacheRequest,
  ): Promise<CheckUserInCacheResponse> | Observable<CheckUserInCacheResponse> | CheckUserInCacheResponse;

  addUserToCache(
    request: AddUserToCacheRequest,
  ): Promise<AddUserToCacheResponse> | Observable<AddUserToCacheResponse> | AddUserToCacheResponse;

  updateUserInCache(
    request: UpdateUserInCacheRequest,
  ): Promise<UpdateUserInCacheResponse> | Observable<UpdateUserInCacheResponse> | UpdateUserInCacheResponse;

  removeUserFromCache(
    request: RemoveUserFromCacheRequest,
  ): Promise<RemoveUserFromCacheResponse> | Observable<RemoveUserFromCacheResponse> | RemoveUserFromCacheResponse;

  checkTokenInCache(
    request: CheckTokenInCacheRequest,
  ): Promise<CheckTokenInCacheResponse> | Observable<CheckTokenInCacheResponse> | CheckTokenInCacheResponse;

  removeTokenFromCache(
    request: RemoveTokenFromCacheRequest,
  ): Promise<RemoveTokenFromCacheResponse> | Observable<RemoveTokenFromCacheResponse> | RemoveTokenFromCacheResponse;

  checkMessagesInCache(
    request: CheckMessagesInCacheRequest,
  ): Promise<CheckMessagesInCacheResponse> | Observable<CheckMessagesInCacheResponse> | CheckMessagesInCacheResponse;

  addMessagesToCache(
    request: AddMessagesToCacheRequest,
  ): Promise<AddMessagesToCacheResponse> | Observable<AddMessagesToCacheResponse> | AddMessagesToCacheResponse;

  removeMessagesFromCache(
    request: RemoveMessagesFromCacheRequest,
  ):
    | Promise<RemoveMessagesFromCacheResponse>
    | Observable<RemoveMessagesFromCacheResponse>
    | RemoveMessagesFromCacheResponse;

  checkNotificationsInCache(
    request: CheckNotificationsInCacheRequest,
  ):
    | Promise<CheckNotificationsInCacheResponse>
    | Observable<CheckNotificationsInCacheResponse>
    | CheckNotificationsInCacheResponse;

  addNotificationsToCache(
    request: AddNotificationsToCacheRequest,
  ):
    | Promise<AddNotificationsToCacheResponse>
    | Observable<AddNotificationsToCacheResponse>
    | AddNotificationsToCacheResponse;

  removeNotificationsFromCache(
    request: RemoveNotificationsFromCacheRequest,
  ):
    | Promise<RemoveNotificationsFromCacheResponse>
    | Observable<RemoveNotificationsFromCacheResponse>
    | RemoveNotificationsFromCacheResponse;

  checkUserRelationInCache(
    request: CheckUserRelationInCacheRequest,
  ):
    | Promise<CheckUserRelationInCacheResponse>
    | Observable<CheckUserRelationInCacheResponse>
    | CheckUserRelationInCacheResponse;

  addUserRelationToCache(
    request: AddUserRelationToCacheRequest,
  ):
    | Promise<AddUserRelationToCacheResponse>
    | Observable<AddUserRelationToCacheResponse>
    | AddUserRelationToCacheResponse;

  removeUserRelationFromCache(
    request: RemoveUserRelationFromCacheRequest,
  ):
    | Promise<RemoveUserRelationFromCacheResponse>
    | Observable<RemoveUserRelationFromCacheResponse>
    | RemoveUserRelationFromCacheResponse;
}

export function CacheServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "checkUserInCache",
      "addUserToCache",
      "updateUserInCache",
      "removeUserFromCache",
      "checkTokenInCache",
      "removeTokenFromCache",
      "checkMessagesInCache",
      "addMessagesToCache",
      "removeMessagesFromCache",
      "checkNotificationsInCache",
      "addNotificationsToCache",
      "removeNotificationsFromCache",
      "checkUserRelationInCache",
      "addUserRelationToCache",
      "removeUserRelationFromCache",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CacheService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CacheService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CACHE_SERVICE_NAME = "CacheService";
