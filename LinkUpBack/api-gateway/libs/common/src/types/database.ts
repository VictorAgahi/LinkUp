// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: database.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackageDatabase = "database";

export interface CreateUserRequest {
  firstname: string;
  lastname: string;
  username: string;
  email: string;
  password: string;
  phoneNumber: string;
}


export interface CreateUserResponse {
  userId: string;
}

export interface CheckUserExistsRequest {
  email: string;
  phoneNumber: string;
}

export interface CheckUserExistsResponse {
  exists: boolean;
}

export interface UpdateUserRequest {
  userId: string;
  firstname: string;
  lastname: string;
  email: string;
  phoneNumber: string;
  password: string;
}

export interface UpdateUserResponse {
  success: boolean;
}

export interface CreateConversationRequest {
  userId1: string;
  userId2: string;
}

export interface CreateConversationResponse {
  conversationId: string;
}

export interface SendMessageRequest {
  conversationId: string;
  userId: string;
  message: string;
}

export interface SendMessageResponse {
  success: boolean;
}

export interface GetMessageHistoryRequest {
  conversationId: string;
}

export interface GetMessageHistoryResponse {
  messages: string[];
}

export interface LikeUserRequest {
  userId: string;
  targetUserId: string;
}

export interface LikeUserResponse {
  success: boolean;
}

export interface CheckMutualLikeRequest {
  userId: string;
  targetUserId: string;
}

export interface CheckMutualLikeResponse {
  isMutual: boolean;
}

export interface GetLikedUsersRequest {
  userId: string;
}

export interface GetLikedUsersResponse {
  likedUserIds: string[];
}

export interface MarkNotificationsAsReadRequest {
  userId: string;
}

export interface MarkNotificationsAsReadResponse {
  success: boolean;
}

export interface GenerateJwtTokenRequest {
  userId: string;
}

export interface GenerateJwtTokenResponse {
  jwtToken: string;
}

export interface VerifyJwtTokenRequest {
  jwtToken: string;
}

export interface VerifyJwtTokenResponse {
  valid: boolean;
  userId: string;
}

export interface CreateUserRelationRequest {
  userId: string;
  relatedUserId: string;
}

export interface CreateUserRelationResponse {
  success: boolean;
}

export interface GetNearbyUsersRequest {
  userId: string;
  latitude: number;
  longitude: number;
}

export interface GetNearbyUsersResponse {
  nearbyUserIds: string[];
}

export interface SearchUsersRequest {
  query: string;
}

export interface SearchUsersResponse {
  userIds: string[];
}

export interface FilterConversationsRequest {
  userId: string;
  filter: string;
}

export interface FilterConversationsResponse {
  conversationIds: string[];
}

export interface VerifyDataSecurityRequest {
  userId: string;
}

export interface VerifyDataSecurityResponse {
  isSecure: boolean;
}

export const DATABASE_PACKAGE_NAME = "database";

export interface DatabaseServiceClient {
  createUser(request: CreateUserRequest): Observable<CreateUserResponse>;

  checkUserExists(request: CheckUserExistsRequest): Observable<CheckUserExistsResponse>;

  updateUser(request: UpdateUserRequest): Observable<UpdateUserResponse>;

  createConversation(request: CreateConversationRequest): Observable<CreateConversationResponse>;

  sendMessage(request: SendMessageRequest): Observable<SendMessageResponse>;

  getMessageHistory(request: GetMessageHistoryRequest): Observable<GetMessageHistoryResponse>;

  likeUser(request: LikeUserRequest): Observable<LikeUserResponse>;

  checkMutualLike(request: CheckMutualLikeRequest): Observable<CheckMutualLikeResponse>;

  getLikedUsers(request: GetLikedUsersRequest): Observable<GetLikedUsersResponse>;

  markNotificationsAsRead(request: MarkNotificationsAsReadRequest): Observable<MarkNotificationsAsReadResponse>;

  generateJwtToken(request: GenerateJwtTokenRequest): Observable<GenerateJwtTokenResponse>;

  verifyJwtToken(request: VerifyJwtTokenRequest): Observable<VerifyJwtTokenResponse>;

  createUserRelation(request: CreateUserRelationRequest): Observable<CreateUserRelationResponse>;

  getNearbyUsers(request: GetNearbyUsersRequest): Observable<GetNearbyUsersResponse>;

  searchUsers(request: SearchUsersRequest): Observable<SearchUsersResponse>;

  filterConversations(request: FilterConversationsRequest): Observable<FilterConversationsResponse>;

  verifyDataSecurity(request: VerifyDataSecurityRequest): Observable<VerifyDataSecurityResponse>;
}

export interface DatabaseServiceController {
  createUser(
    request: CreateUserRequest,
  ): Promise<CreateUserResponse> | Observable<CreateUserResponse> | CreateUserResponse;

  checkUserExists(
    request: CheckUserExistsRequest,
  ): Promise<CheckUserExistsResponse> | Observable<CheckUserExistsResponse> | CheckUserExistsResponse;

  updateUser(
    request: UpdateUserRequest,
  ): Promise<UpdateUserResponse> | Observable<UpdateUserResponse> | UpdateUserResponse;

  createConversation(
    request: CreateConversationRequest,
  ): Promise<CreateConversationResponse> | Observable<CreateConversationResponse> | CreateConversationResponse;

  sendMessage(
    request: SendMessageRequest,
  ): Promise<SendMessageResponse> | Observable<SendMessageResponse> | SendMessageResponse;

  getMessageHistory(
    request: GetMessageHistoryRequest,
  ): Promise<GetMessageHistoryResponse> | Observable<GetMessageHistoryResponse> | GetMessageHistoryResponse;

  likeUser(request: LikeUserRequest): Promise<LikeUserResponse> | Observable<LikeUserResponse> | LikeUserResponse;

  checkMutualLike(
    request: CheckMutualLikeRequest,
  ): Promise<CheckMutualLikeResponse> | Observable<CheckMutualLikeResponse> | CheckMutualLikeResponse;

  getLikedUsers(
    request: GetLikedUsersRequest,
  ): Promise<GetLikedUsersResponse> | Observable<GetLikedUsersResponse> | GetLikedUsersResponse;

  markNotificationsAsRead(
    request: MarkNotificationsAsReadRequest,
  ):
    | Promise<MarkNotificationsAsReadResponse>
    | Observable<MarkNotificationsAsReadResponse>
    | MarkNotificationsAsReadResponse;

  generateJwtToken(
    request: GenerateJwtTokenRequest,
  ): Promise<GenerateJwtTokenResponse> | Observable<GenerateJwtTokenResponse> | GenerateJwtTokenResponse;

  verifyJwtToken(
    request: VerifyJwtTokenRequest,
  ): Promise<VerifyJwtTokenResponse> | Observable<VerifyJwtTokenResponse> | VerifyJwtTokenResponse;

  createUserRelation(
    request: CreateUserRelationRequest,
  ): Promise<CreateUserRelationResponse> | Observable<CreateUserRelationResponse> | CreateUserRelationResponse;

  getNearbyUsers(
    request: GetNearbyUsersRequest,
  ): Promise<GetNearbyUsersResponse> | Observable<GetNearbyUsersResponse> | GetNearbyUsersResponse;

  searchUsers(
    request: SearchUsersRequest,
  ): Promise<SearchUsersResponse> | Observable<SearchUsersResponse> | SearchUsersResponse;

  filterConversations(
    request: FilterConversationsRequest,
  ): Promise<FilterConversationsResponse> | Observable<FilterConversationsResponse> | FilterConversationsResponse;

  verifyDataSecurity(
    request: VerifyDataSecurityRequest,
  ): Promise<VerifyDataSecurityResponse> | Observable<VerifyDataSecurityResponse> | VerifyDataSecurityResponse;
}

export function DatabaseServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createUser",
      "checkUserExists",
      "updateUser",
      "createConversation",
      "sendMessage",
      "getMessageHistory",
      "likeUser",
      "checkMutualLike",
      "getLikedUsers",
      "markNotificationsAsRead",
      "generateJwtToken",
      "verifyJwtToken",
      "createUserRelation",
      "getNearbyUsers",
      "searchUsers",
      "filterConversations",
      "verifyDataSecurity",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("DatabaseService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("DatabaseService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DATABASE_SERVICE_NAME = "DatabaseService";
